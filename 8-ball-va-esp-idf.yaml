substitutions:
  leds: "28"  # number of diodes in the strip
  vol_step: "0.1" # media player volume step
  waiting_time: "8s" # duration of listening 


# PINOUT
  pin_buzzer: GPIO10
  pin_leds: GPIO38
  pin_lrclk_mic: GPIO16 #WS
  pin_bclk_mic: GPIO17 #SCK
  pin_din_mic: GPIO15
  pin_lrclk_spk: GPIO5
  pin_bclk_spk: GPIO6
  pin_din_spk: GPIO7
  pin_vol_up: "42"
  pin_vol_down: "40"
  pin_play: "41"

esphome:
  name: 8-ball
  friendly_name: 8-ball
  min_version: 2024.12.4
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_ESP32S3_INSTRUCTION_CACHE_32KB: "y"
      CONFIG_ESP32_S3_BOX_BOARD: "y"
      CONFIG_SPIRAM_ALLOW_STACK_EXTERNAL_MEMORY: "y"

      CONFIG_SPIRAM_TRY_ALLOCATE_WIFI_LWIP: "y"

      # Settings based on https://github.com/espressif/esp-adf/issues/297#issuecomment-783811702
      CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM: "16"
      CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM: "512"
      CONFIG_ESP32_WIFI_STATIC_TX_BUFFER: "y"
      CONFIG_ESP32_WIFI_TX_BUFFER_TYPE: "0"
      CONFIG_ESP32_WIFI_STATIC_TX_BUFFER_NUM: "8"
      CONFIG_ESP32_WIFI_CACHE_TX_BUFFER_NUM: "32"
      CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED: "y"
      CONFIG_ESP32_WIFI_TX_BA_WIN: "16"
      CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED: "y"
      CONFIG_ESP32_WIFI_RX_BA_WIN: "32"
      CONFIG_LWIP_MAX_ACTIVE_TCP: "16"
      CONFIG_LWIP_MAX_LISTENING_TCP: "16"
      CONFIG_TCP_MAXRTX: "12"
      CONFIG_TCP_SYNMAXRTX: "6"
      CONFIG_TCP_MSS: "1436"
      CONFIG_TCP_MSL: "60000"
      CONFIG_TCP_SND_BUF_DEFAULT: "65535"
      CONFIG_TCP_WND_DEFAULT: "65535"  # Adjusted from linked settings to avoid compilation error
      CONFIG_TCP_RECVMBOX_SIZE: "512"
      CONFIG_TCP_QUEUE_OOSEQ: "y"
      CONFIG_TCP_OVERSIZE_MSS: "y"
      CONFIG_LWIP_WND_SCALE: "y"
      CONFIG_TCP_RCV_SCALE: "3"
      CONFIG_LWIP_TCPIP_RECVMBOX_SIZE: "512"

      CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST: "y"
      CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY: "y"

      CONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC: "y"
      CONFIG_MBEDTLS_SSL_PROTO_TLS1_3: "y"  # TLS1.3 support isn't enabled by default in IDF 5.1.5



# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "3d3RcoYaHkHmaFCrx2jgzkpIYjvhMqZAx3ASUXlKu8U="
  on_client_connected:
     - media_player.volume_set: !lambda "return 0.60;"
     - light.turn_on:
        id: ring
        red: 0%
        green: 100%
        blue: 0%
        brightness: 50%
     - delay: 3s
     - light.turn_on:
        id: ring
        red: 0%
        green: 100%
        blue: 100%
        brightness: 50%
     - script.execute: reset_ww
     - delay: 1s
     - light.turn_off: ring

ota:
  - platform: esphome
    password: "xxxxxxxxxxxxxxxxxxxxxx"

psram:
  mode: octal
  speed: 80MHz

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: xxxxxxxxxx
    gateway: xxxxxxxxxxx
    subnet: xxxxxxxxxxx

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "8-Ball Fallback Hotspot"
    password: "xxxxxxxxxxxxxx"

captive_portal:

external_components:
  - source:
      type: git
      url: https://github.com/esphome/home-assistant-voice-pe
      ref: dev
    components:
      - media_player
      - nabu
    refresh: 0s    

button:
  - platform: restart
    name: Reboot


text_sensor:  # unlock this option in Home Assistant
  - platform: homeassistant
    id: assist_satellite
    entity_id: assist_satellite.8_ball_assist_satellite
    internal: true
    on_value:
      - if:
          condition:
            lambda: 'return id(assist_satellite).state == "responding";'
          then:
            - script.execute: speaking
            - wait_until:
                lambda: 'return id(assist_satellite).state == "idle";'
            - script.execute: reset_ww
            - light.turn_off:  ring 
      - if:
          condition:
            lambda: 'return id(assist_satellite).state == "processing";'
          then:
            - light.turn_off:  ring 
            - script.execute: reset_ww
      - if:
          condition:
            lambda: 'return id(assist_satellite).state == "listening";'
          then:
            - script.execute: detecting
            - wait_until:
                 condition:
                   not:
                     lambda: 'return id(assist_satellite).state == "listening";'
                 timeout: ${waiting_time}
            - voice_assistant.stop
            - light.turn_off: ring 
            - script.execute: reset_ww



voice_assistant:
  id: va
  microphone: asr_mic
  media_player: player
  use_wake_word: false
  noise_suppression_level: 2
  auto_gain: 31dBFS 
  on_tts_end:
    - delay: 100ms
    - script.execute: reset_ww
  on_stt_end:
    - delay: 100ms
    - script.execute: reset_ww
  on_error:
    - delay: 100ms
    - script.execute: reset_ww
    - script.execute: error


micro_wake_word:
  id: mww
  models:
    - model: alexa
  microphone: asr_mic
  on_wake_word_detected:
    - voice_assistant.start:
        wake_word: !lambda return wake_word;
    - delay: 100ms   
    - rtttl.play: 'two_short:d=4,o=5,b=100:16e6,16e6'
    - if:
          condition:
            lambda: return id(player)->state == media_player::MediaPlayerState::MEDIA_PLAYER_STATE_PLAYING;
          then:
            - media_player.pause: player
            - wait_until:
                 condition:
                   lambda: 'return id(assist_satellite).state == "idle";'
                 timeout: 5s
            - media_player.play: player

i2s_audio:
  - id: i2s_spk
    i2s_lrclk_pin: ${pin_lrclk_spk}
    i2s_bclk_pin: ${pin_bclk_spk}
  - id: i2s_mic
    i2s_lrclk_pin: ${pin_lrclk_mic}
    i2s_bclk_pin: ${pin_bclk_mic}

microphone:
  - platform: i2s_audio
    id: asr_mic
    adc_type: external
    i2s_din_pin: ${pin_din_mic}
    channel: left
    i2s_audio_id: i2s_mic

speaker:
  - platform: i2s_audio
    sample_rate: 48000
    i2s_mode: primary
    i2s_dout_pin: ${pin_din_spk}
    bits_per_sample: 32bit
    i2s_audio_id: i2s_spk
    dac_type: external
    channel: mono
    timeout: never
    buffer_duration: 100ms

media_player:
  - platform: nabu
    id: player
    name: glosnik
    internal: false
    speaker:
    sample_rate: 48000
    volume_increment: ${vol_step}
    volume_min: 0.1
    volume_max: 1
    on_announcement:
      - script.execute: speaking
      - wait_until:
         condition:
             media_player.is_idle: player
      - light.turn_off: ring
      - media_player.stop: player
      - script.execute: reset_ww

switch:
  - platform: template
    id: assist
    icon: mdi:account-tie-voice
    name: "Asystent"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on: 
       - micro_wake_word.start
    on_turn_off:
       - micro_wake_word.stop


binary_sensor:
  - platform: gpio
    pin: 
      number: ${pin_vol_up}
      mode: INPUT_PULLUP
      inverted: false
    name: "Vol+"
    internal: true
    on_press:
       - if:
           condition:
             lambda: 'return id(player).volume < 1.00;'
           then:
             - media_player.volume_up
             - script.execute: volume

  - platform: gpio
    pin: 
      number: ${pin_vol_down}
      mode: INPUT_PULLUP
      inverted: false     
    name: "Vol-"
    internal: true
    on_press:
       - if:
           condition:
             lambda: 'return id(player).volume > 0.0;'
           then:
             - media_player.volume_down
             - script.execute: volume

  - platform: gpio
    pin: 
      number: ${pin_play}
      mode: INPUT_PULLUP
      inverted: false
    name: "Play/Pause"
    internal: true
    on_press:
      - media_player.toggle
      - script.execute: reset_ww

output:
  - platform: ledc
    pin: ${pin_buzzer}
    id: rtttl_out
rtttl:
  output: rtttl_out
  id: my_rtttl  

light:
  - platform: esp32_rmt_led_strip
    default_transition_length: 0.5s
    id: ring
    chipset: SK6812
    pin: ${pin_leds}
    num_leds: ${leds}
    rgb_order: GRB
    rmt_channel: 0
    name: "Ring"
    effects:
      - pulse:
          name: "Pulse"
          transition_length: 300ms
          update_interval: 250ms
          min_brightness: 15%
          max_brightness: 60%
      - addressable_color_wipe:
          name: "Detecting"
          colors:
            - red: 10%
              green: 100%
              blue: 100%
              num_leds: 7
              gradient: false
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 19
          add_led_interval: 12ms
          reverse: true

sensor:
  - platform: homeassistant
    id: vol_led  # number of light diodes
    internal: true
    entity_id: media_player.8_ball_glosnik
    attribute: volume_level
    accuracy_decimals: 0
    filters:
      - lambda: return x / ${vol_step} * 2 ; # 2 diodes on one step volume
      - round: 0

script:
  - id: detecting
    then:
      - light.turn_on:
         id: ring
         red: 20%
         green: 80%
         blue: 100%
         brightness: 50%
         effect: Detecting

  - id: speaking
    then:
      - light.turn_on:
         id: ring
         red: 0%
         green: 100%
         blue: 0%
         brightness: 50%
         effect: Pulse

  - id: error
    then:
      - light.turn_on:
         id: ring
         red: 100%
         green: 0%
         blue: 0%
         brightness: 50%
         effect: none
      - delay: 2s
      - light.turn_off: ring


  - id: volume
    then:
      - light.addressable_set:
         id: ring
         range_from: 0    
         range_to: !lambda return id(vol_led).state;
         red: 100%
         green: 5%
         blue: 80%
      - delay: 30ms
      - light.turn_off: ring

  - id: reset_ww
    then:
     - micro_wake_word.stop     
     - delay: 250ms
     - micro_wake_word.start
